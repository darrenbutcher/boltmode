generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                  Int       @id @default(autoincrement())
  compoundId          String    @unique @map(name: "compound_id")
  userId              Int       @map(name: "user_id")
  providerType        String    @map(name: "provider_type")
  providerId          String    @map(name: "provider_id")
  providerAccountId   String    @map(name: "provider_account_id")
  refreshToken        String?   @map(name: "refresh_token")
  accessToken         String?   @map(name: "access_token")
  accessTokenExpires  DateTime? @map(name: "access_token_expires")
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model feed {
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  id         String   @id @default(dbgenerated())
  title      String
  content    String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
}

model session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model user {
  id             Int        @default(autoincrement())
  name           String?    
  email          String?    @unique
  emailVerified  DateTime?  @map(name: "email_verified")
  image          String?
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @default(now()) @map(name: "updated_at")
  phoneNumber    String?
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  uid            String     @id @default(dbgenerated())
  role           String     @default("free")
  bio            String?
  firstName      String?    @map(name: "first_name")
  lastName       String?    @map(name: "last_name")
  username       String?    
  planId         Int?       @map(name: "plan_id")
  customerId     String?    @map(name: "customer_id")
  settings       settings[]

  @@map(name: "users")
}

model verificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model plan {
  id    Int    @id @default(autoincrement())
  /// The value of this field is generated by the database as: `gen_random_uuid()`.
  uid   String @default(dbgenerated())
  name  String @unique
  price Int
}

model settings {
  id            Int           @id @default(autoincrement())
  uid           String
  key           String
  value         Boolean       @default(true)
  settingsKeys  settingsKeys  @relation(fields: [key], references: [value])
  users         User          @relation(fields: [uid], references: [uid])
}

model settingsKeys {
  value       String     @id
  description String
  settings    settings[]

  @@map(name: "settings_keys")
}
